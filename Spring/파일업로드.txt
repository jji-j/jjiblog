pom.xml에추가

<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.3.1 </version>
		</dependency>
	
		<dependency>
			<groupId>org.imgscalr</groupId>
			<artifactId>imgscalr-lib</artifactId>
			<version>4.2</version>
		</dependency>


컨트롤러

@Controller
@RequestMapping(value = "/") 
public class FileController {
	
	@RequestMapping(value = "/file", method = RequestMethod.GET)
	public String file() throws Exception{
		
		return "/fileUpload";
	}




<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>파일 업로드</h1>
	
	<form action="fileupload" method="get" enctype="multipart/form-data" id="form1">
	    <input type="file" name="uploadfile" placeholder="파일 선택" /><br/>
	    <input type="submit" value="업로드">
	</form>

</body>
</html>


multipartResolver라고하는 객체의 설정은 웹과 관련이 있기 떄문에 root-context.xml이 아닌 
servlet-context.xml 을 이용해서 설정


	<beans:bean id="multipartResolver"
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <beans:property name="maxUploadSize" value="10485760"></beans:property>
    </beans:bean>/



 파일을 저장할 경로는 상수처럼 사용되기 때문에 servelet-context.xml 파일을 이용해서 특정 경로를 
문자열로 설정합니다.

<beans:beans id="uploadPath" class="java.lang.String">
	<beans:constructor-arg value="C:\\\zzz\\upload">
	</beans:constructor-arg>
</beans:bean>

uploadPath라는 id를 가진 문자열이 스프링의 빈으로 설정되었음. 문자열의 값은 C:\\\zzz\\upload 폴더를
문자열로 지저해 둠.

작성된 경로의 문자열은 fileController에 주입해서 ㅅ용

테스트를 위해선 위의 경로가 반드시 존재해야만함. 탐색기 등의 프로그램을 이용해서
해당 경로에 폴더를 생성.



FileController

@Resource(name="uploadPath")
private String uploadPath;

@Controller
@RequestMapping(value = "/") 
public class FileController {

	@Resource(name="uploadPath")
	private String uploadPath;
	
	@RequestMapping(value = "/file", method = RequestMethod.GET)
	public String file(MultipartFile file, Model model) throws Exception{

	String savedName = uploadFile(file.getOriginalFilename(), file.getBytes());
		
		model.addAttribute("savedName", savedName);
		
		return "/fileUpload";
		
		return "/fileUpload";
	}
}

private String uploadFile(String originalName, byte[] fileData)
throws Exception{

UUID uid = UUID.randomUUID(); //랜덤한 uid(이름같은번호)를 부여할 준비
String savedName = uid.toString() + "_" + originalName;//123_이진사진.jpg
File target = new File(uploadPath, savedName);// 업로드패스 경로에 해당이름으로
					//비어있는 파일을 생성

FileCopyUtils.copy(fileData, target);//생성했던 파일에 가져온 데이터를 주입하여 완전한 파일로 만듦
				
return savedName;//업로드가 완료된 파일 이름을 스트링값으로 리턴
}





		return "/uploadResult";수정


package com.myp.controller;

import java.io.File;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping(value = "/") 
public class FileController {

	@Resource(name="uploadPath")
	private String uploadPath;
	
	@RequestMapping(value = "/file", method = RequestMethod.POST)
	public String file(MultipartFile file, Model model) throws Exception{
		
		String savedName = uploadFile(file.getOriginalFilename(), file.getBytes());
		
		model.addAttribute("savedName", savedName);
		
		return "/uploadResult";
	}
	
	private String uploadFile(String originalName, byte[] fileData)	throws Exception{

		UUID uid = UUID.randomUUID();//랜덤한 uid(이름같은번호)를 부여할 준비
		String savedName = uid.toString() + "_" + originalName;//123_이진사진.jpg
		File target = new File(uploadPath, savedName);// 업로드패스 경로에 해당이름으로//비어있는 파일을 생성
		FileCopyUtils.copy(fileData, target);//생성했던 파일에 가져온 데이터를 주입하여 완전한 파일로 만듦

		return savedName;//업로드가 완료된 파일 이름을 스트링값으로 리턴
	}
	
	

}




uploadResult.jsp 만들기

<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="UTF-8"%>
<%@page session = "false" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<script>

var result = "${savedName}";
parent.addFilePath(result);

</script>



</head>
<body>

</body>
</html>





fileUpload.jsp 수정



<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>파일 업로드</h1>
	
	<form action="fileupload" method="get" enctype="multipart/form-data" id="form1" target="zeroFrame">
	    <input type="file" name="file"  /><br/>
	    <input type="submit" value="업로드">
	</form>

	<iframe>
		function addFilePath(msg){
			alert(msg);
			document.getElementById("form1").reset();
			}
	
	</iframe>

</body>
</html>





servelet-context.xml에 추가

    <beans:bean id="uploadPath" class="java.lang.String">
    	<beans:constructor-arg value="C:\\zzz\\upload">
    	</beans:constructor-arg>
    </beans:bean>



최종 컨트롤ㄹ러
package com.myp.controller;

import java.io.File;
import java.util.UUID;

import javax.annotation.Resource;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

@Controller
@RequestMapping(value = "/") 
public class FileController {

	@Resource(name="uploadPath")
	private String uploadPath;
	
	@RequestMapping(value = "/file", method = RequestMethod.GET)
	public String filee() throws Exception{
	
		return "/fileUpload";
	}
	
	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	public String file(MultipartFile file, Model model) throws Exception{
		System.out.println(file.getBytes());
		String savedName = uploadFile(file.getOriginalFilename(), file.getBytes());
		System.out.println("ssss"+ savedName);
		model.addAttribute("savedName", savedName);
		
		return "/uploadResult";
	}